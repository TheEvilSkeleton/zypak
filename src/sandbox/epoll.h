// Copyright 2019 Endless Mobile, Inc.
// Portions copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#pragma once

#include <functional>
#include <optional>
#include <unordered_map>

#include "base/unique_fd.h"

// A C++-friendly wrapper over the epoll APIs.
class Epoll {
 public:
  Epoll(const Epoll& other) = delete;
  Epoll(Epoll&& other) = default;
  ~Epoll();

  static std::optional<Epoll> Create();

  using Handler = std::function<bool(Epoll*)>;

  class Id {
   private:
    Id(int fd) : fd(fd) {}
    int fd;
    friend class Epoll;
  };

  // Add a new timer that fires after the given # of seconds.
  std::optional<Id> AddTimer(int seconds, Handler func);

  // Add a new file descriptor to poll. The file descriptor is not owned by the Epoll instance.
  std::optional<Id> AddFd(int fd, Handler func);
  // Add a new file descriptor to poll. Upon destruction of the Epoll instance, the file
  // descriptor will be closed.
  std::optional<Id> TakeFd(unique_fd fd, Handler func);

  // Remove an ID generated by an Add* call.
  bool Remove(Id id);

  // Run one iteration of the event loop.
  bool RunIteration();

 private:
  Epoll(unique_fd epfd);

  unique_fd epfd_;

  struct FdData {
    bool owned;
    Handler func;
  };

  std::unordered_map<int, FdData> fd_data_;
};
